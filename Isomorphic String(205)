Given two strings s and t, determine if they are isomorphic.
Two strings s and t are isomorphic if the characters in s can be replaced to get t.
All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.
Example 1:

Input: s = "egg", t = "add"

Output: true

Explanation:

The strings s and t can be made identical by:

Mapping 'e' to 'a'.
Mapping 'g' to 'd'.
Example 2:

Input: s = "foo", t = "bar"

Output: false

Explanation:

The strings s and t can not be made identical as 'o' needs to be mapped to both 'a' and 'r'.



--------------------------------------------------------------------------------------------
SOLUTION - 



class Solution {
public:
    bool isIsomorphic(string s, string t) {
        int freq[256] = {0};
        int freq2[256] = {0};

        for(int i=0;i<s.size();i++){
            if(freq[s[i]] == 0 && freq2[t[i]]==0){
               freq[s[i]] = t[i];
               freq2[t[i]] = 1;
            }
        }

        
        for(int i=0;i<s.size();i++){
           if(freq[s[i]] != t[i]){
            return false;
           } 
        }
        return true;
    }
};

-----------------------------------------------------------------------
class Solution {
public:
    bool isIsomorphic(string s, string t) {
       unordered_map<char,char>mS2T;
       unordered_map<char,char>mT2S;

       for(int i=0;i<s.size();i++){
          char charS = s[i];
          char charT = t[i];
         if(mS2T.find(charS) != mS2T.end()){
            if(mS2T[charS] != charT){
                return false;
            }
         }

         if(mT2S.find(charT) != mS2T.end()){
            if(mT2S[charT] != charS){
                return false;
            }
         }

         mS2T[charS] = charT;
         mT2S[charT] = charS;
       }

       return true;
    }
};
