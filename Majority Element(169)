Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2

----------------------------------------------------------------------------------------------------------------------------------------------------
SOLUTION 1-

TC - O(N^2)
SC - O(1)


class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n = nums.size();
        int element = 0;
        int count = 0;

        for(int i=0;i<n;i++){
            count = 0;
            element = nums[i];

            for(int j=i;j<n;j++){
                if(element == nums[j]){
                    count++;
                }

                if(count > n/2){
                    return element;
                }
            }
        }
        return 0;
    }
};



SOLUTION 2 -

TC - O(N LOGN)
SC - O(1)

class Solution {
public:
    int majorityElement(vector<int>& nums) {
       int count = 0;
       int element = 0;
       int n = nums.size();
       int i=0;
       sort(nums.begin(),nums.end());

       while(i<n){
          if(count == 0){
            element = nums[i];
            count++;
            i++;
          }
          else{
            if(element == nums[i]){
                count++;
                i++;
            }
            else{
                count = 0;
            }
          }
           if(count > n/2){
                return element;
            }
       }

       return 0;
    }
};



SOLUTION 3 -
MOORES VOTING ALGO

TC - O(N)
SC - O(1)

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int count = 0;
        int candidate = 0;
        
        for (int num : nums) {
            if (count == 0) {
                candidate = num;
            }
            
            if (num == candidate) {
                count++;
            } else {
                count--;
            }
        }
        
        return candidate;
    }
};
