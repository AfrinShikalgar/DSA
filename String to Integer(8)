Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.

The algorithm for myAtoi(string s) is as follows:

Whitespace: Ignore any leading whitespace (" ").
Signedness: Determine the sign by checking if the next character is '-' or '+', assuming positivity is neither present.
Conversion: Read the integer by skipping leading zeros until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0.
Rounding: If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then round the integer to remain in the range. Specifically, integers less than -231 should be rounded to -231, and integers greater than 231 - 1 should be rounded to 231 - 1.
Return the integer as the final result.

 

Example 1:

Input: s = "42"

Output: 42

Explanation:

The underlined characters are what is read in and the caret is the current reader position.
Step 1: "42" (no characters read because there is no leading whitespace)
         ^
Step 2: "42" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: "42" ("42" is read in)
-----------------------------------------------------------------

SOLUTION -
TC - O(N)

class Solution {
public:
    int myAtoi(string str) {
        int ans = 0;
        int i =0;
        int sign = 1;
        while(str[i] == ' '){
            i++;
        }
        

        if(i < str.size() && (str[i]=='+' || str[i]=='-')){
            sign = str[i]=='-' ? -1 : 1;
            i++;           
        }

        while(i<str.size() && (str[i] >= '0' && str[i] <= '9')){
            if(ans > INT_MAX/10 || (ans == INT_MAX/10 && str[i] > '7')){
                return sign==1 ? INT_MAX : INT_MIN;
            }
            ans = ans * 10 + (str[i] - '0');
            i++;
        }

        return ans*sign;

    }
};
