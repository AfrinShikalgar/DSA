Given an array arr[] that contains positive and negative integers (may contain 0 as well). Find the maximum product that we can get in a subarray of arr.

Note: It is guaranteed that the output fits in a 32-bit integer.

Examples

Input: arr[] = [-2, 6, -3, -10, 0, 2]
Output: 180
Explanation: The subarray with maximum product is {6, -3, -10} with product = 6 * (-3) * (-10) = 180.
Input: arr[] = [-1, -3, -10, 0, 60]
Output: 60
Explanation: The subarray with maximum product is {60}.

---------------------------------------------------------------
TC - O(N)
SC - 0(1)
SOLUTION -

// User function Template for C++
class Solution {
  public:
    // Function to find maximum product subarray
    int maxProduct(vector<int> &arr) {
         int prefix = 1;
         int suffix = 1;
         int n = arr.size();
         int MaxProduct = INT_MIN;
        for(int i=0;i<arr.size();i++){
            if(prefix == 0) prefix = 1;
            if(suffix == 0) suffix = 1;
            
            prefix*=arr[i];
            suffix*=arr[n-i-1];
            MaxProduct = max(MaxProduct,max(prefix,suffix));
        }
        return MaxProduct;
        
        // Your Code Here
    }
};



------------
MInor chnages with same complexity
// User function Template for C++
class Solution {
  public:
    // Function to find maximum product subarray
    int maxProduct(vector<int> &arr) {
         int prefix = 1;
         int suffix = 1;
         int n = arr.size();
         int MaxProduct = INT_MIN;
        for(int i=0;i<arr.size();i++){
          
            
            prefix*=arr[i];
            suffix*=arr[n-i-1];
            
            MaxProduct = max(MaxProduct,max(prefix,suffix));
            if(arr[i] == 0) prefix = 1;
              if(arr[n-i-1] == 0) suffix = 1;
        }
        return MaxProduct;
        
        // Your Code Here
    }
};

